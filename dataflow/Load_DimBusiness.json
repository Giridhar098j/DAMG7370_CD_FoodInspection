{
	"name": "Load_DimBusiness",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stage_INS_TABLE",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIM_Business",
						"type": "DatasetReference"
					},
					"name": "DimBusinessMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeDIM_Business",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"20\")",
				"}",
				"source(output(",
				"          LICENSE_NUM as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          SOURCE_DATA as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT DISTINCT \\n    LICENSE_NUM, \\n    DBA_NAME, \\n    AKA_NAME, \\n    FACILITY_TYPE,\\n    SOURCE_DATA\\nFROM FOODCD_SCHEMA.STG_FOOD_INSPECTIONS\\n',",
				"     format: 'query') ~> source1",
				"source(output(",
				"          MAXBUSINESSSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BUSINESS_SK), 0) AS MAXBUSINESSSK \\nFROM FOODCD_SCHEMA.DIM_BUSINESS\\n',",
				"     format: 'query') ~> DimBusinessMaxId",
				"source1, DimBusinessMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(ROWNUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BUSINESS_SK = MAXBUSINESSSK  + ROWNUM,",
				"          JOB_ID = $JOB_ID,",
				"          Load_Dt = currentDate()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BUSINESS_SK as decimal(38,0),",
				"          LICENSE_NUM as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          SOURCE_ID as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BUSINESS_SK,",
				"          LICENSE_NUM,",
				"          DBA_NAME,",
				"          AKA_NAME,",
				"          FACILITY_TYPE,",
				"          JOB_ID,",
				"          LOAD_DT = Load_Dt,",
				"          SOURCE_ID = SOURCE_DATA",
				"     )) ~> sink1"
			]
		}
	}
}