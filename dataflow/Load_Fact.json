{
	"name": "Load_Fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stage_INS_TABLE",
						"type": "DatasetReference"
					},
					"name": "Stage"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_DimDate",
						"type": "DatasetReference"
					},
					"name": "sourcedimdate"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_DimLocation",
						"type": "DatasetReference"
					},
					"name": "sourcedimloc"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_DimRisk",
						"type": "DatasetReference"
					},
					"name": "sourceDimRisk"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_DimViolation",
						"type": "DatasetReference"
					},
					"name": "sourceDimViolation"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDIM_Business",
						"type": "DatasetReference"
					},
					"name": "sourceDimBusiness"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDim_Inspection",
						"type": "DatasetReference"
					},
					"name": "sourceDimIns"
				},
				{
					"dataset": {
						"referenceName": "Snowflake_FactTable",
						"type": "DatasetReference"
					},
					"name": "FactMaxId"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snowflake_FactTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "select1"
				},
				{
					"name": "join7"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JOB_ID as string (\"20\")",
				"}",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUM as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESCRIPTION as string,",
				"          VIOLATION_COMMENT as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          SOURCE_DATA as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> Stage",
				"source(output(",
				"          DATE_SK as decimal(38,0),",
				"          DATE as date,",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          DAY_NUM as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as decimal(2,0),",
				"          QTR_NUM as decimal(2,0),",
				"          YEAR_NUM as decimal(4,0),",
				"          IS_WEEKEND as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcedimdate",
				"source(output(",
				"          LOCATION_SK as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          SOURCE_ID as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcedimloc",
				"source(output(",
				"          RISK_SK as decimal(38,0),",
				"          RISK as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimRisk",
				"source(output(",
				"          VIOLATION_ID_SK as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESCRIPTION as string,",
				"          SOURCE_ID as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimViolation",
				"source(output(",
				"          BUSINESS_SK as decimal(38,0),",
				"          LICENSE_NUM as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          SOURCE_ID as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimBusiness",
				"source(output(",
				"          INSPECTION_TYPE_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimIns",
				"source(output(",
				"          INSPECTIONSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(INSPECTION_ID_SK),0) AS INSPECTIONSK FROM FOODCD_SCHEMA.FACT_INSPECTION',",
				"     format: 'query') ~> FactMaxId",
				"Stage, sourcedimloc join(Stage@ADDRESS == sourcedimloc@ADDRESS",
				"     && Stage@CITY == sourcedimloc@CITY",
				"     && Stage@STATE == sourcedimloc@STATE",
				"     && Stage@ZIP_CODE == sourcedimloc@ZIP_CODE",
				"     && Stage@LATITUDE == sourcedimloc@LATITUDE",
				"     && Stage@LONGITUDE == sourcedimloc@LONGITUDE",
				"     && SOURCE_DATA == SOURCE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, sourceDimRisk join(Stage@RISK == sourceDimRisk@RISK,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, sourceDimViolation join(Stage@VIOLATION_DESCRIPTION == sourceDimViolation@VIOLATION_DESCRIPTION",
				"     && SOURCE_DATA == sourceDimViolation@SOURCE_ID",
				"     && Stage@VIOLATION_CODE == sourceDimViolation@VIOLATION_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, sourceDimBusiness join(Stage@DBA_NAME == sourceDimBusiness@DBA_NAME",
				"     && Stage@AKA_NAME == sourceDimBusiness@AKA_NAME",
				"     && Stage@FACILITY_TYPE == sourceDimBusiness@FACILITY_TYPE",
				"     && Stage@LICENSE_NUM == sourceDimBusiness@LICENSE_NUM,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, sourceDimIns join(Stage@INSPECTION_TYPE == sourceDimIns@INSPECTION_TYPE",
				"     && Stage@RESULTS == sourceDimIns@RESULTS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, sourcedimdate join(INSPECTION_DATE == DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"join7 select(mapColumn(",
				"          BUSINESS_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_ID_SK,",
				"          INSPECTION_TYPE_SK,",
				"          RISK_SK,",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          VIOLATION_COMMENT,",
				"          SOURCE_DATA,",
				"          INSPECTIONSK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join6, FactMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join7",
				"select1 keyGenerate(output(ROWNUM as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(JOB_ID = $JOB_ID,",
				"          Load_Dt = currentDate(),",
				"          INSPECTIONSK = INSPECTIONSK + ROWNUM) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_ID_SK as decimal(38,0),",
				"          BUSINESS_SK as decimal(38,0),",
				"          LOCATION_SK as decimal(38,0),",
				"          VIOLATION_ID_SK as decimal(38,0),",
				"          INSPECTION_TYPE_SK as decimal(38,0),",
				"          RISK_SK as decimal(38,0),",
				"          DATE_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          VIOLATION_COMMENT as string,",
				"          SOURCE_ID as string,",
				"          JOB_ID as string,",
				"          LOAD_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_ID_SK = INSPECTIONSK,",
				"          BUSINESS_SK,",
				"          LOCATION_SK,",
				"          VIOLATION_ID_SK,",
				"          INSPECTION_TYPE_SK,",
				"          RISK_SK,",
				"          DATE_SK,",
				"          INSPECTION_ID,",
				"          VIOLATION_COMMENT,",
				"          SOURCE_ID = SOURCE_DATA,",
				"          JOB_ID,",
				"          LOAD_DT = Load_Dt",
				"     )) ~> sink1"
			]
		}
	}
}